/*
Callback Approach
*/
function getUserDetails(id, callback) {
    // Timeout 
    // DB Interaction
    setTimeout(() => {

        if(id % 2 == 0) {
            callback(new Error("User Not Found"))
        } else {
            callback(null, { id: 1, user: `ART-${id}`})
        }

        
    }, 2000)

}

function processCallback() {
    
    getUserDetails(2, (error, data) => {
        // Callback is always error first
        // Fail fast 
        if(error) {
            console.log(error)
            return;
        }

        console.log(data);

    })

}

processCallback()

/**
 * Promise
 * State - PENDING / FULFILLED / REJECTED 
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race
 */

function getUserDetailsPromisisifed(id) {
    return new Promise((resolve, reject) => {
        getUserDetails(id, (err, data) => {
            if(err){
                // Incase of error, reject the promise
                return reject(err)
            } 
            // Success case return data
            return resolve(data)
        })
    })
}

console.log(getUserDetailsPromisisifed(1))

getUserDetailsPromisisifed(1)
    .then((data) => {
        console.log(data)
    })
    .catch((err)=> {
        console.log(`1: ${err}` )
    })

getUserDetailsPromisisifed(2)
    .then((data) => { // Resolve
        console.log(data)
    })
    .catch((err)=> { // Reject
        console.log(`2: ${err}`)
    })

// Parallel Processing

let user1 = getUserDetailsPromisisifed(1)
let user2 = getUserDetailsPromisisifed(2)
let userList = [user1, user2]
console.time("PP")
Promise.all(userList)
    .then((data) => { // Resolve
        console.timeEnd("PP")
        console.log(data)
    })
    .catch((err)=> { // Reject
        console.log(`PP: ${err}`)
    })

[ { id: 1, user: 'ART-1' }, { id: 1, user: 'ART-3' } ]


// vaikunth.thivagaran@gmail.com